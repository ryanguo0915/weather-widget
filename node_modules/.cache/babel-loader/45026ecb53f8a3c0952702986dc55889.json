{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/components/WeatherBannerTab/WeatherBannerTab.jsx\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport styled from '@emotion/styled';\nimport WeatherBanner from '../WeatherBanner/WeatherBanner';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Brush, AreaChart, Area, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherBannerTab = ({\n  location,\n  forecastOfDay,\n  locale,\n  unit\n}) => {\n  const marks = {};\n  forecastOfDay.forEach((item, index) => {\n    marks[index] = item.moment.locale(locale).format('a h:mm');\n  });\n  console.log(forecastOfDay);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(LocationText, {\n      children: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherBanner, {\n      forecastNow: forecastOfDay[0],\n      unit: unit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 200,\n      children: /*#__PURE__*/_jsxDEV(AreaChart, {\n        width: 1000,\n        height: 200,\n        data: forecastOfDay,\n        syncId: \"anyId\",\n        margin: {\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"dt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          dataKey: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Area, {\n          type: \"monotone\",\n          dataKey: \"temp\",\n          stroke: \"#82ca9d\",\n          fill: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_c = WeatherBannerTab;\nWeatherBannerTab.defaultProps = {\n  unit: 'metric',\n  forecastOfDay: []\n};\nWeatherBannerTab.propTypes = {\n  location: PropTypes.string.isRequired,\n  forecastOfDay: PropTypes.arrayOf(PropTypes.shape({\n    dt: PropTypes.number.isRequired,\n    temp: PropTypes.number.isRequired,\n    temp_min: PropTypes.number.isRequired,\n    temp_max: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    icon: PropTypes.string.isRequired,\n    desc: PropTypes.string.isRequired,\n    clouds: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired\n  })),\n  unit: PropTypes.string\n};\nexport default WeatherBannerTab;\nconst LocationText = styled.div`\n  font-size: 2rem;\n`;\n_c2 = LocationText;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n_c3 = Container;\nconst TabContainer = styled.div`\n  margin: 0.8rem 0.8rem;\n  padding-bottom: 1.5rem;\n`;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"WeatherBannerTab\");\n$RefreshReg$(_c2, \"LocationText\");\n$RefreshReg$(_c3, \"Container\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/components/WeatherBannerTab/WeatherBannerTab.jsx"],"names":["React","useState","PropTypes","moment","styled","WeatherBanner","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Brush","AreaChart","Area","ResponsiveContainer","WeatherBannerTab","location","forecastOfDay","locale","unit","marks","forEach","item","index","format","console","log","top","right","left","bottom","defaultProps","propTypes","string","isRequired","arrayOf","shape","dt","number","temp","temp_min","temp_max","humidity","icon","desc","clouds","wind","LocationText","div","Container","TabContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SACIC,SADJ,EAEIC,IAFJ,EAGIC,KAHJ,EAIIC,KAJJ,EAKIC,aALJ,EAMIC,OANJ,EAOIC,MAPJ,EAQIC,KARJ,EASIC,SATJ,EAUIC,IAVJ,EAWIC,mBAXJ,QAYS,UAZT;;;AAaA,MAAMC,gBAAgB,GAAG,CAAC;AACxBC,EAAAA,QADwB;AAExBC,EAAAA,aAFwB;AAGxBC,EAAAA,MAHwB;AAIxBC,EAAAA;AAJwB,CAAD,KAKnB;AACJ,QAAMC,KAAK,GAAG,EAAd;AACAH,EAAAA,aAAa,CAACI,OAAd,CAAsB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACrCH,IAAAA,KAAK,CAACG,KAAD,CAAL,GAAeD,IAAI,CAACrB,MAAL,CAAYiB,MAAZ,CAAmBA,MAAnB,EAA2BM,MAA3B,CAAkC,QAAlC,CAAf;AACD,GAFD;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,aAAZ;AACA,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,YAAD;AAAA,gBAAeD;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,WAAW,EAAEC,aAAa,CAAC,CAAD,CAAzC;AAA8C,MAAA,IAAI,EAAEE;AAApD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,mBAAD;AAAqB,MAAA,KAAK,EAAC,MAA3B;AAAkC,MAAA,MAAM,EAAE,GAA1C;AAAA,6BACE,QAAC,SAAD;AACA,QAAA,KAAK,EAAE,IADP;AAEA,QAAA,MAAM,EAAE,GAFR;AAGA,QAAA,IAAI,EAAEF,aAHN;AAIA,QAAA,MAAM,EAAC,OAJP;AAKA,QAAA,MAAM,EAAE;AACJU,UAAAA,GAAG,EAAE,EADD;AAEJC,UAAAA,KAAK,EAAE,EAFH;AAGJC,UAAAA,IAAI,EAAE,CAHF;AAIJC,UAAAA,MAAM,EAAE;AAJJ,SALR;AAAA,gCAYA,QAAC,aAAD;AAAe,UAAA,eAAe,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAZA,eAaA,QAAC,KAAD;AAAO,UAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBAbA,eAcA,QAAC,KAAD;AAAO,UAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBAdA,eAeA,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAfA,eAgBA,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,UAAX;AAAsB,UAAA,OAAO,EAAC,MAA9B;AAAqC,UAAA,MAAM,EAAC,SAA5C;AAAsD,UAAA,IAAI,EAAC;AAA3D;AAAA;AAAA;AAAA;AAAA,gBAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CArCD;;KAAMf,gB;AAuCNA,gBAAgB,CAACgB,YAAjB,GAAgC;AAC9BZ,EAAAA,IAAI,EAAE,QADwB;AAE9BF,EAAAA,aAAa,EAAE;AAFe,CAAhC;AAKAF,gBAAgB,CAACiB,SAAjB,GAA6B;AAC3BhB,EAAAA,QAAQ,EAAEhB,SAAS,CAACiC,MAAV,CAAiBC,UADA;AAE3BjB,EAAAA,aAAa,EAAEjB,SAAS,CAACmC,OAAV,CACbnC,SAAS,CAACoC,KAAV,CAAgB;AACdC,IAAAA,EAAE,EAAErC,SAAS,CAACsC,MAAV,CAAiBJ,UADP;AAEdK,IAAAA,IAAI,EAAEvC,SAAS,CAACsC,MAAV,CAAiBJ,UAFT;AAGdM,IAAAA,QAAQ,EAAExC,SAAS,CAACsC,MAAV,CAAiBJ,UAHb;AAIdO,IAAAA,QAAQ,EAAEzC,SAAS,CAACsC,MAAV,CAAiBJ,UAJb;AAKdQ,IAAAA,QAAQ,EAAE1C,SAAS,CAACsC,MAAV,CAAiBJ,UALb;AAMdS,IAAAA,IAAI,EAAE3C,SAAS,CAACiC,MAAV,CAAiBC,UANT;AAOdU,IAAAA,IAAI,EAAE5C,SAAS,CAACiC,MAAV,CAAiBC,UAPT;AAQdW,IAAAA,MAAM,EAAE7C,SAAS,CAACsC,MAAV,CAAiBJ,UARX;AASdY,IAAAA,IAAI,EAAE9C,SAAS,CAACsC,MAAV,CAAiBJ;AATT,GAAhB,CADa,CAFY;AAe3Bf,EAAAA,IAAI,EAAEnB,SAAS,CAACiC;AAfW,CAA7B;AAkBA,eAAelB,gBAAf;AAEA,MAAMgC,YAAY,GAAG7C,MAAM,CAAC8C,GAAI;AAChC;AACA,CAFA;MAAMD,Y;AAIN,MAAME,SAAS,GAAG/C,MAAM,CAAC8C,GAAI;AAC7B;AACA;AACA;AACA,CAJA;MAAMC,S;AAMN,MAAMC,YAAY,GAAGhD,MAAM,CAAC8C,GAAI;AAChC;AACA;AACA,CAHA","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport styled from '@emotion/styled';\nimport WeatherBanner from '../WeatherBanner/WeatherBanner';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    Brush,\n    AreaChart,\n    Area,\n    ResponsiveContainer,\n  } from 'recharts';\nconst WeatherBannerTab = ({\n  location,\n  forecastOfDay,\n  locale,\n  unit,\n}) => {\n  const marks = {};\n  forecastOfDay.forEach((item, index) => {\n    marks[index] = item.moment.locale(locale).format('a h:mm');\n  });\n  console.log(forecastOfDay);\n  return (\n    <Container>\n      <LocationText>{location}</LocationText>\n      <WeatherBanner forecastNow={forecastOfDay[0]} unit={unit} />\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <AreaChart\n        width={1000}\n        height={200}\n        data={forecastOfDay}\n        syncId=\"anyId\"\n        margin={{\n            top: 10,\n            right: 30,\n            left: 0,\n            bottom: 0,\n        }}\n        >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"dt\" />\n        <YAxis dataKey='' />\n        <Tooltip />\n        <Area type=\"monotone\" dataKey=\"temp\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\n        </AreaChart>\n      </ResponsiveContainer>\n    </Container>\n  );\n};\n\nWeatherBannerTab.defaultProps = {\n  unit: 'metric',\n  forecastOfDay: [],\n};\n\nWeatherBannerTab.propTypes = {\n  location: PropTypes.string.isRequired,\n  forecastOfDay: PropTypes.arrayOf(\n    PropTypes.shape({\n      dt: PropTypes.number.isRequired,\n      temp: PropTypes.number.isRequired,\n      temp_min: PropTypes.number.isRequired,\n      temp_max: PropTypes.number.isRequired,\n      humidity: PropTypes.number.isRequired,\n      icon: PropTypes.string.isRequired,\n      desc: PropTypes.string.isRequired,\n      clouds: PropTypes.number.isRequired,\n      wind: PropTypes.number.isRequired,\n    }),\n  ),\n  unit: PropTypes.string,\n};\n\nexport default WeatherBannerTab;\n\nconst LocationText = styled.div`\n  font-size: 2rem;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n\nconst TabContainer = styled.div`\n  margin: 0.8rem 0.8rem;\n  padding-bottom: 1.5rem;\n`;\n"]},"metadata":{},"sourceType":"module"}