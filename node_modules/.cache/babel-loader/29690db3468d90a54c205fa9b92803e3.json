{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget'; // mock data for testing without API call\n\nimport testData from './testData.json';\nimport moment from 'moment';\nimport transformDataFromApi from './utils/transformDataFromApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nconst geolocationOptions = {\n  // Using this option you can define when should the location request timeout and\n  // call the error callback with timeout message.\n  timeout: 1000 * 60 * 1 // 1 min (1000 ms * 60 sec * 1 minute = 60 000ms)\n\n};\n\nconst App = () => {\n  _s();\n\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityIndex, setCityIndex] = useState(city || 0);\n  const [forecast, setForecast] = useState([]);\n  const [currentCityInfo, setCurrentCityInfo] = useState({});\n  const [shouldCallForWeather, setShouldCallForWeather] = useState(false); // store location in state\n\n  const [location, setLocation] = useState([]); // store error message in state\n\n  const [error, setError] = useState(''); // const oldCoords = localStorage.getItem('coords');\n  // Success handler for geolocation's `getCurrentPosition` method\n\n  const handleSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords; // localStorage.setItem('coords', position.coords);\n\n    if (latitude !== location[0] && longitude !== location[1]) {\n      setLocation([latitude, longitude]);\n      setShouldCallForWeather(true);\n    }\n  }; // Error handler for geolocation's `getCurrentPosition` method\n\n\n  const handleError = error => {\n    setError(error.message);\n  }; // ...\n\n\n  if (!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    // console.log('Locatingâ€¦');\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n  }\n\n  const getCityName = async (latitude, longitude) => {\n    try {\n      if (latitude && longitude) {\n        const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n\n        if (response.data.results[0]) {\n          setCurrentCityInfo({\n            city: response.data.results[0].components.village,\n            label: response.data.results[0].annotations.flag\n          });\n        }\n      } else {}\n    } catch (err) {\n      if (OPEN_CAGE_DATA_KEY.length === 0) {\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  const fetchWeatherAsync = async (latitude, longitude, cityId) => {\n    let queryParams = {};\n\n    if (!cityId) {\n      queryParams = {\n        lat: latitude,\n        lon: longitude,\n        lang: 'en_us',\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: 'imperial'\n      };\n    } else {\n      queryParams = {\n        q: cityId,\n        lang: 'en_us',\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: 'imperial'\n      };\n    }\n\n    try {\n      if (JSON.stringify(queryParams) !== '{}') {\n        const response = await axios.get('https://api.openweathermap.org/data/2.5/forecast', {\n          params: queryParams\n        });\n        const transformData = response.data.list.map(data => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed,\n          time: moment(data.dt_txt).locale('en-us').format('h:mm a')\n        }));\n        setForecast(transformData);\n        setShouldCallForWeather(false);\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = testData.list.map();\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (shouldCallForWeather) {\n      fetchWeatherAsync(location[0], location[1]);\n    }\n  }, [shouldCallForWeather]); // notice the empty array here\n  // useEffect(() => {\n  //   getCityName(location.latitude, location.longitude);\n  // }, [location]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: error.length === 0 ? /*#__PURE__*/_jsxDEV(WeatherWidget, {\n      config: {\n        location: currentCityInfo.label,\n        locale: 'en-us',\n        unit: 'metric'\n      },\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Unable to fetch weather data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"L+fJ0HJulRVTFK13/ICNm2ix6AQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/App.js"],"names":["React","useState","useEffect","axios","WeatherWidget","testData","moment","transformDataFromApi","OPEN_WEATHER_MAP_KEY","OPEN_CAGE_DATA_KEY","geolocationOptions","timeout","App","params","URLSearchParams","window","location","search","city","get","cityIndex","setCityIndex","forecast","setForecast","currentCityInfo","setCurrentCityInfo","shouldCallForWeather","setShouldCallForWeather","setLocation","error","setError","handleSuccess","position","latitude","longitude","coords","handleError","message","navigator","geolocation","console","log","getCurrentPosition","getCityName","response","data","results","components","village","label","annotations","flag","err","length","stack","fetchWeatherAsync","cityId","queryParams","lat","lon","lang","appid","units","q","JSON","stringify","transformData","list","map","dt","temp","main","temp_min","temp_max","humidity","icon","weather","desc","description","clouds","all","wind","speed","time","dt_txt","locale","format","unit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget';\n// mock data for testing without API call\nimport testData from './testData.json';\nimport moment from 'moment';\nimport transformDataFromApi from './utils/transformDataFromApi'\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\n\nconst geolocationOptions = {\n  // Using this option you can define when should the location request timeout and\n  // call the error callback with timeout message.\n  timeout: 1000 * 60 * 1 // 1 min (1000 ms * 60 sec * 1 minute = 60 000ms)\n};\n\nconst App = () => {\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityIndex, setCityIndex] = useState(city || 0); \n  const [forecast, setForecast] = useState([]);\n  const [currentCityInfo, setCurrentCityInfo] = useState({});\n  const [shouldCallForWeather, setShouldCallForWeather] = useState(false);\n  // store location in state\n  const [location, setLocation] = useState([]);\n  // store error message in state\n  const [error, setError] = useState('');\n  // const oldCoords = localStorage.getItem('coords');\n\n  // Success handler for geolocation's `getCurrentPosition` method\n  const handleSuccess = position => {\n    const { latitude, longitude } = position.coords;\n    // localStorage.setItem('coords', position.coords);\n    if(latitude !== location[0] && longitude !== location[1]) {\n      setLocation([\n        latitude,\n        longitude\n      ]);\n      setShouldCallForWeather(true);\n    }\n  };\n\n  // Error handler for geolocation's `getCurrentPosition` method\n  const handleError = error => {\n    setError(error.message);\n  };\n  // ...\n\n  if(!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    // console.log('Locatingâ€¦');\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n  }\n\n  const getCityName = async (latitude, longitude) => {\n    try {\n      if(latitude && longitude) {\n        const response = await axios.get( `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n        if(response.data.results[0]) {\n          setCurrentCityInfo({city: response.data.results[0].components.village, label: response.data.results[0].annotations.flag});\n        }\n      } else {\n        \n      }\n    } catch (err) {\n      if (OPEN_CAGE_DATA_KEY.length === 0) {\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  }\n\n  const fetchWeatherAsync = async (latitude, longitude, cityId) => {\n    let queryParams = {}\n    if(!cityId) {\n      queryParams = {\n        lat: latitude,\n        lon: longitude,\n        lang: 'en_us',\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: 'imperial',\n      }\n    } else {\n      queryParams = {\n        q: cityId,\n        lang: 'en_us',\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: 'imperial',\n      };\n    }\n    try {\n      if(JSON.stringify(queryParams) !== '{}') {\n        const response = await axios.get(\n          'https://api.openweathermap.org/data/2.5/forecast',\n          {\n            params: queryParams,\n          },\n        );\n        const transformData = response.data.list.map((data) => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed,\n          time: moment(data.dt_txt).locale('en-us').format('h:mm a')\n        }));\n        setForecast(transformData);\n        setShouldCallForWeather(false);\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = testData.list.map();\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if(shouldCallForWeather) {\n      fetchWeatherAsync(location[0], location[1]);\n    }\n  }, [shouldCallForWeather]); // notice the empty array here\n\n  // useEffect(() => {\n  //   getCityName(location.latitude, location.longitude);\n  // }, [location]);\n\n  return (\n    <div className=\"App\">\n      {error.length === 0 ? (\n        <WeatherWidget\n          config={{\n            location: currentCityInfo.label,\n            locale: 'en-us',\n            unit: 'metric',\n          }}\n          forecast={forecast}\n        />\n      ) : (\n        <div>\n          <h2>Unable to fetch weather data!</h2>\n          <pre>{error}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}