{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget'; // mock data for testing without API call\n\nimport testData from './testData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nconst cities = [{\n  city: 'taipei',\n  label: 'ðŸ‡¹ðŸ‡¼ Taipei'\n}, {\n  city: 'tokyo',\n  label: 'ðŸ‡¯ðŸ‡µ Tokyo'\n}, {\n  city: 'moscow',\n  label: 'ðŸ‡·ðŸ‡º Moscow'\n}, {\n  city: 'sydney',\n  label: 'ðŸ‡¦ðŸ‡º Sydney'\n}, {\n  city: 'london',\n  label: 'ðŸ‡¬ðŸ‡§ London'\n}, {\n  city: 'paris',\n  label: 'ðŸ‡«ðŸ‡· Paris'\n}, {\n  city: 'mexico',\n  label: 'ðŸ‡²ðŸ‡½ Mexico'\n}, {\n  city: 'seattle',\n  label: 'ðŸ‡ºðŸ‡¸ Seattle'\n}, {\n  city: 'washington',\n  label: 'ðŸ‡ºðŸ‡¸ Washington'\n}, {\n  city: 'beijing',\n  label: 'ðŸ‡¨ðŸ‡³ Beijing'\n}];\n\nconst App = () => {\n  _s();\n\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityInfo, setCityInfo] = useState({\n    city: '',\n    label: ''\n  });\n  const [cityCoord, setCityCoord] = useState({});\n  const [cityIndex, setCityIndex] = useState(city || 0);\n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState('');\n\n  async function getCityName(latitude, longitude) {\n    try {\n      const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n      console.log(response.data.results[0]);\n\n      if (response.data.results[0]) {\n        setCityInfo({\n          city: response.data.results[0].components.village,\n          label: response.data.results[0].annotations.flag\n        });\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        // const transformData = await testData.list.map((data) => ({\n        //   dt: data.dt,\n        //   temp: data.main.temp,\n        //   temp_min: data.main.temp_min,\n        //   temp_max: data.main.temp_max,\n        //   humidity: data.main.humidity,\n        //   icon: data.weather[0].icon,\n        //   desc: data.weather[0].description,\n        //   clouds: data.clouds.all,\n        //   wind: data.wind.speed,\n        // }));\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  }\n\n  function success(position) {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    getCityName(latitude, longitude);\n    console.log(position);\n    console.log('Your location is', latitude, longitude);\n  }\n\n  function geoError() {\n    console.log('Unable to retrieve your location');\n  }\n\n  if (!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    console.log('Locatingâ€¦');\n    navigator.geolocation.getCurrentPosition(success, geoError);\n  }\n\n  const fetchWeatherAsync = async cityId => {\n    try {\n      const response = await axios.get('https://api.openweathermap.org/data/2.5/forecast', {\n        params: {\n          q: cityId,\n          lang: 'zh_tw',\n          appid: OPEN_WEATHER_MAP_KEY,\n          units: 'metric'\n        }\n      });\n      const transformData = await response.data.list.map(data => ({\n        dt: data.dt,\n        temp: data.main.temp,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        humidity: data.main.humidity,\n        icon: data.weather[0].icon,\n        desc: data.weather[0].description,\n        clouds: data.clouds.all,\n        wind: data.wind.speed\n      }));\n      setForecast(transformData);\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = await testData.list.map(data => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed\n        }));\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchWeatherAsync(cities[cityIndex].city);\n  }, []); // notice the empty array here\n\n  useEffect(() => {\n    getCityName();\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: error.length === 0 ? /*#__PURE__*/_jsxDEV(WeatherWidget, {\n      config: {\n        location: cities[cityIndex].label,\n        unit: 'metric',\n        locale: 'zh-tw',\n        onLocationClick: () => {\n          if (cityIndex + 1 >= cities.length) {\n            setCityIndex(0);\n            fetchWeatherAsync(cities[0].city);\n          } else {\n            setCityIndex(cityIndex + 1);\n            fetchWeatherAsync(cities[cityIndex + 1].city);\n          }\n        }\n      },\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Unable to fetch weather data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"IDFO4Xr3HkY+WV/5zM91eTlDjSA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/App.js"],"names":["React","useState","useEffect","axios","WeatherWidget","testData","OPEN_WEATHER_MAP_KEY","OPEN_CAGE_DATA_KEY","cities","city","label","App","params","URLSearchParams","window","location","search","get","cityInfo","setCityInfo","cityCoord","setCityCoord","cityIndex","setCityIndex","forecast","setForecast","error","setError","getCityName","latitude","longitude","response","console","log","data","results","components","village","annotations","flag","err","length","stack","success","position","coords","geoError","navigator","geolocation","getCurrentPosition","fetchWeatherAsync","cityId","q","lang","appid","units","transformData","list","map","dt","temp","main","temp_min","temp_max","humidity","icon","weather","desc","description","clouds","all","wind","speed","unit","locale","onLocationClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget';\n// mock data for testing without API call\nimport testData from './testData.json';\n\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nconst cities = [\n  { city: 'taipei', label: 'ðŸ‡¹ðŸ‡¼ Taipei' },\n  { city: 'tokyo', label: 'ðŸ‡¯ðŸ‡µ Tokyo' },\n  { city: 'moscow', label: 'ðŸ‡·ðŸ‡º Moscow' },\n  { city: 'sydney', label: 'ðŸ‡¦ðŸ‡º Sydney' },\n  { city: 'london', label: 'ðŸ‡¬ðŸ‡§ London' },\n  { city: 'paris', label: 'ðŸ‡«ðŸ‡· Paris' },\n  { city: 'mexico', label: 'ðŸ‡²ðŸ‡½ Mexico' },\n  { city: 'seattle', label: 'ðŸ‡ºðŸ‡¸ Seattle' },\n  { city: 'washington', label: 'ðŸ‡ºðŸ‡¸ Washington' },\n  { city: 'beijing', label: 'ðŸ‡¨ðŸ‡³ Beijing' },\n];\n\nconst App = () => {\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityInfo, setCityInfo] = useState({city: '', label: ''});\n  const [cityCoord, setCityCoord] = useState({});\n  const [cityIndex, setCityIndex] = useState(city || 0);\n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState('');\n\n  async function getCityName(latitude, longitude) {\n    try {\n      const response = await axios.get( `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n      console.log(response.data.results[0]);\n      if(response.data.results[0]) {\n        setCityInfo({city: response.data.results[0].components.village, label: response.data.results[0].annotations.flag});\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        // const transformData = await testData.list.map((data) => ({\n        //   dt: data.dt,\n        //   temp: data.main.temp,\n        //   temp_min: data.main.temp_min,\n        //   temp_max: data.main.temp_max,\n        //   humidity: data.main.humidity,\n        //   icon: data.weather[0].icon,\n        //   desc: data.weather[0].description,\n        //   clouds: data.clouds.all,\n        //   wind: data.wind.speed,\n        // }));\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  }\n\n  function success(position) {\n    const latitude  = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    getCityName(latitude, longitude)\n    console.log(position);\n    console.log('Your location is',latitude, longitude);\n\n  }\n\n  function geoError() {\n    console.log('Unable to retrieve your location');\n  }\n\n  if(!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    console.log('Locatingâ€¦');\n    navigator.geolocation.getCurrentPosition(success, geoError);\n  }\n\n  const fetchWeatherAsync = async (cityId) => {\n    try {\n      const response = await axios.get(\n        'https://api.openweathermap.org/data/2.5/forecast',\n        {\n          params: {\n            q: cityId,\n            lang: 'zh_tw',\n            appid: OPEN_WEATHER_MAP_KEY,\n            units: 'metric',\n          },\n        },\n      );\n      const transformData = await response.data.list.map((data) => ({\n        dt: data.dt,\n        temp: data.main.temp,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        humidity: data.main.humidity,\n        icon: data.weather[0].icon,\n        desc: data.weather[0].description,\n        clouds: data.clouds.all,\n        wind: data.wind.speed,\n      }));\n      setForecast(transformData);\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = await testData.list.map((data) => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed,\n        }));\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchWeatherAsync(cities[cityIndex].city);\n  }, []); // notice the empty array here\n\n  useEffect(() => {\n    getCityName();\n  }, {});\n\n  return (\n    <div className=\"App\">\n      {error.length === 0 ? (\n        <WeatherWidget\n          config={{\n            location: cities[cityIndex].label,\n            unit: 'metric',\n            locale: 'zh-tw',\n            onLocationClick: () => {\n              if (cityIndex + 1 >= cities.length) {\n                setCityIndex(0);\n                fetchWeatherAsync(cities[0].city);\n              } else {\n                setCityIndex(cityIndex + 1);\n                fetchWeatherAsync(cities[cityIndex + 1].city);\n              }\n            },\n          }}\n          forecast={forecast}\n        />\n      ) : (\n        <div>\n          <h2>Unable to fetch weather data!</h2>\n          <pre>{error}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}