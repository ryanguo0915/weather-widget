{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/components/WeatherBanner/WeatherBanner.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport styled from '@emotion/styled';\nimport iconCodeMapping from '../../WeatherIcon';\n/**\n * Render a primary display of the current forecast, including a date time, a weather icon,\n * current temperature, humidity, cloud density and wind\n *\n * @param {object} forecastNow the current forecast\n * @param {string} unit the unit format for figures, only accepting 'metric' for now\n * @param {locale} locale locale for time formating\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherBanner = ({\n  forecastNow,\n  unit,\n  locale\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n    children: `${moment.unix(forecastNow.dt).locale(locale).format('dddd a h:mm')}, ${forecastNow.desc}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(BannerContainer, {\n    children: [/*#__PURE__*/_jsxDEV(BannerIcon, {\n      src: iconCodeMapping[forecastNow.icon]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Temperature, {\n      children: Math.round(forecastNow.temp * 10) / 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Unit, {\n      children: [\"\\xB0\", unit === 'metric' ? 'C' : 'F']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: '1'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DetailContainer, {\n      children: [/*#__PURE__*/_jsxDEV(InfoText, {\n        children: [\"Clouds:\", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [forecastNow.clouds, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n        children: [\"Humidity: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [forecastNow.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n        children: [\"Wind:\", ' ', /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [forecastNow.wind, unit === 'metric' ? 'm/s' : 'mph']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 200,\n    children: /*#__PURE__*/_jsxDEV(AreaChart, {\n      width: 500,\n      height: 200,\n      data: data,\n      syncId: \"anyId\",\n      margin: {\n        top: 10,\n        right: 30,\n        left: 0,\n        bottom: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"pv\",\n        stroke: \"#82ca9d\",\n        fill: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n\n_c = WeatherBanner;\nWeatherBanner.defaultProps = {\n  unit: 'metric',\n  locale: 'zh-tw'\n};\nWeatherBanner.propTypes = {\n  forecastNow: PropTypes.shape({\n    dt: PropTypes.number.isRequired,\n    temp: PropTypes.number.isRequired,\n    temp_min: PropTypes.number.isRequired,\n    temp_max: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    icon: PropTypes.string.isRequired,\n    desc: PropTypes.string.isRequired,\n    clouds: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired\n  }).isRequired,\n  unit: PropTypes.string,\n  locale: PropTypes.string\n};\nexport default WeatherBanner;\nconst BannerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n_c2 = BannerContainer;\nconst BannerIcon = styled.img`\n  width: 5rem;\n  height: 5rem;\n`;\n_c3 = BannerIcon;\nconst Temperature = styled.div`\n  font-size: 3rem;\n  margin-left: 0.5rem;\n  font-weight: bold;\n`;\n_c4 = Temperature;\nconst Unit = styled.div`\n  font-size: 1rem;\n  margin-top: 0.7rem;\n`;\n_c5 = Unit;\nconst DetailContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n_c6 = DetailContainer;\nconst InfoText = styled.div`\n  text-align: right;\n`;\n_c7 = InfoText;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"WeatherBanner\");\n$RefreshReg$(_c2, \"BannerContainer\");\n$RefreshReg$(_c3, \"BannerIcon\");\n$RefreshReg$(_c4, \"Temperature\");\n$RefreshReg$(_c5, \"Unit\");\n$RefreshReg$(_c6, \"DetailContainer\");\n$RefreshReg$(_c7, \"InfoText\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/components/WeatherBanner/WeatherBanner.jsx"],"names":["React","PropTypes","moment","styled","iconCodeMapping","WeatherBanner","forecastNow","unit","locale","unix","dt","format","desc","icon","Math","round","temp","flex","clouds","humidity","wind","data","top","right","left","bottom","defaultProps","propTypes","shape","number","isRequired","temp_min","temp_max","string","BannerContainer","div","BannerIcon","img","Temperature","Unit","DetailContainer","InfoText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport styled from '@emotion/styled';\nimport iconCodeMapping from '../../WeatherIcon';\n\n/**\n * Render a primary display of the current forecast, including a date time, a weather icon,\n * current temperature, humidity, cloud density and wind\n *\n * @param {object} forecastNow the current forecast\n * @param {string} unit the unit format for figures, only accepting 'metric' for now\n * @param {locale} locale locale for time formating\n */\nconst WeatherBanner = ({ forecastNow, unit, locale }) => (\n  <div>\n    <h5>\n      {`${moment.unix(forecastNow.dt).locale(locale).format('dddd a h:mm')}, ${\n        forecastNow.desc\n      }`}\n    </h5>\n    <BannerContainer>\n      <BannerIcon src={iconCodeMapping[forecastNow.icon]} />\n      <Temperature>{Math.round(forecastNow.temp * 10) / 10}</Temperature>\n      <Unit>\n        &deg;\n        {unit === 'metric' ? 'C' : 'F'}\n      </Unit>\n      <div style={{ flex: '1' }} />\n      <DetailContainer>\n        <InfoText>\n          Clouds:\n          <b>{forecastNow.clouds}%</b>\n        </InfoText>\n        <InfoText>\n          Humidity: <b>{forecastNow.humidity}%</b>\n        </InfoText>\n        <InfoText>\n          Wind:{' '}\n          <b>\n            {forecastNow.wind}\n            {unit === 'metric' ? 'm/s' : 'mph'}\n          </b>\n        </InfoText>\n      </DetailContainer>\n    </BannerContainer>\n    <ResponsiveContainer width=\"100%\" height={200}>\n          <AreaChart\n            width={500}\n            height={200}\n            data={data}\n            syncId=\"anyId\"\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 0,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Area type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\n          </AreaChart>\n        </ResponsiveContainer>\n  </div>\n);\n\nWeatherBanner.defaultProps = {\n  unit: 'metric',\n  locale: 'zh-tw',\n};\n\nWeatherBanner.propTypes = {\n  forecastNow: PropTypes.shape({\n    dt: PropTypes.number.isRequired,\n    temp: PropTypes.number.isRequired,\n    temp_min: PropTypes.number.isRequired,\n    temp_max: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    icon: PropTypes.string.isRequired,\n    desc: PropTypes.string.isRequired,\n    clouds: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n  }).isRequired,\n  unit: PropTypes.string,\n  locale: PropTypes.string,\n};\n\nexport default WeatherBanner;\n\nconst BannerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst BannerIcon = styled.img`\n  width: 5rem;\n  height: 5rem;\n`;\n\nconst Temperature = styled.div`\n  font-size: 3rem;\n  margin-left: 0.5rem;\n  font-weight: bold;\n`;\n\nconst Unit = styled.div`\n  font-size: 1rem;\n  margin-top: 0.7rem;\n`;\n\nconst DetailContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst InfoText = styled.div`\n  text-align: right;\n`;\n"]},"metadata":{},"sourceType":"module"}