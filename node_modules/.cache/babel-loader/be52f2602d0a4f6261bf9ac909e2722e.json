{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { useCurrentLocation } from './hooks/useCurrentLocation';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget'; // mock data for testing without API call\n\nimport testData from './testData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nconst cities = [{\n  city: '',\n  label: ''\n}, {\n  city: 'taipei',\n  label: 'ðŸ‡¹ðŸ‡¼ Taipei'\n}, {\n  city: 'tokyo',\n  label: 'ðŸ‡¯ðŸ‡µ Tokyo'\n}, {\n  city: 'moscow',\n  label: 'ðŸ‡·ðŸ‡º Moscow'\n}, {\n  city: 'sydney',\n  label: 'ðŸ‡¦ðŸ‡º Sydney'\n}, {\n  city: 'london',\n  label: 'ðŸ‡¬ðŸ‡§ London'\n}, {\n  city: 'paris',\n  label: 'ðŸ‡«ðŸ‡· Paris'\n}, {\n  city: 'mexico',\n  label: 'ðŸ‡²ðŸ‡½ Mexico'\n}, {\n  city: 'seattle',\n  label: 'ðŸ‡ºðŸ‡¸ Seattle'\n}, {\n  city: 'washington',\n  label: 'ðŸ‡ºðŸ‡¸ Washington'\n}, {\n  city: 'beijing',\n  label: 'ðŸ‡¨ðŸ‡³ Beijing'\n}];\nconst geolocationOptions = {\n  // Using this option you can define when should the location request timeout and\n  // call the error callback with timeout message.\n  timeout: 1000 * 60 * 1 // 1 min (1000 ms * 60 sec * 1 minute = 60 000ms)\n\n};\n\nconst App = () => {\n  _s();\n\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityIndex, setCityIndex] = useState(city || 0);\n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState('');\n  const [currentCityInfo, setCurrentCityInfo] = useState({}); // store location in state\n\n  const [location, setLocation] = useState([]); // store error message in state\n\n  const oldCoords = localStorage.getItem('coords'); // Success handler for geolocation's `getCurrentPosition` method\n\n  const handleSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    console.log('in success', position);\n    localStorage.setItem('coords', position.coords);\n\n    if (latitude !== location[0] && longitude !== location[1]) {\n      setLocation([latitude, longitude]);\n    }\n  }; // Error handler for geolocation's `getCurrentPosition` method\n\n\n  const handleError = error => {\n    setError(error.message);\n  }; // ...\n\n\n  if (!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    // console.log('Locatingâ€¦');\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n  }\n\n  const getCityName = async (latitude, longitude) => {\n    try {\n      if (latitude && longitude) {\n        const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n\n        if (response.data.results[0]) {\n          setCurrentCityInfo({\n            city: response.data.results[0].components.village,\n            label: response.data.results[0].annotations.flag\n          });\n        }\n      } else {}\n    } catch (err) {\n      if (OPEN_CAGE_DATA_KEY.length === 0) {\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  const fetchWeatherAsync = async (latitude, longitude, cityId) => {\n    let queryParams = {};\n\n    if (!cityId) {\n      queryParams = {\n        lat: latitude,\n        lon: longitude,\n        lang: 'en_us',\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: 'metric'\n      };\n    } else {\n      queryParams = {\n        q: cityId,\n        lang: 'en_us',\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: 'metric'\n      };\n    }\n\n    try {\n      console.log(JSON.stringify(queryParams));\n\n      if (JSON.stringify(queryParams) !== '{}') {\n        const response = await axios.get('https://api.openweathermap.org/data/2.5/forecast', {\n          params: queryParams\n        });\n        const transformData = response.data.list.map(data => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed\n        }));\n        setForecast(transformData);\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = testData.list.map(data => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed\n        }));\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchWeatherAsync(...location);\n  }, [location]); // notice the empty array here\n  // useEffect(() => {\n  //   getCityName(location.latitude, location.longitude);\n  // }, [location]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: error.length === 0 ? /*#__PURE__*/_jsxDEV(WeatherWidget, {\n      config: {\n        location: cities[cityIndex].label,\n        unit: 'metric',\n        locale: 'zh-tw',\n        onLocationClick: () => {\n          if (cityIndex + 1 >= cities.length) {\n            setCityIndex(0);\n            fetchWeatherAsync(cities[0].city);\n          } else {\n            setCityIndex(cityIndex + 1);\n            fetchWeatherAsync(cities[cityIndex + 1].city);\n          }\n        }\n      },\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Unable to fetch weather data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"A/ZCUHRZdTK35Wmhl0KkxE/e6GI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/App.js"],"names":["React","useState","useEffect","axios","useCurrentLocation","WeatherWidget","testData","OPEN_WEATHER_MAP_KEY","OPEN_CAGE_DATA_KEY","cities","city","label","geolocationOptions","timeout","App","params","URLSearchParams","window","location","search","get","cityIndex","setCityIndex","forecast","setForecast","error","setError","currentCityInfo","setCurrentCityInfo","setLocation","oldCoords","localStorage","getItem","handleSuccess","position","latitude","longitude","coords","console","log","setItem","handleError","message","navigator","geolocation","getCurrentPosition","getCityName","response","data","results","components","village","annotations","flag","err","length","stack","fetchWeatherAsync","cityId","queryParams","lat","lon","lang","appid","units","q","JSON","stringify","transformData","list","map","dt","temp","main","temp_min","temp_max","humidity","icon","weather","desc","description","clouds","all","wind","speed","unit","locale","onLocationClick"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,kBAAT,QAAmC,4BAAnC;AACA,OAAOC,aAAP,MAA0B,0CAA1B,C,CACA;;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,MAAMC,oBAAoB,GAAG,kCAA7B;AACA,MAAMC,kBAAkB,GAAG,kCAA3B;AACA,MAAMC,MAAM,GAAG,CACb;AAAEC,EAAAA,IAAI,EAAE,EAAR;AAAYC,EAAAA,KAAK,EAAE;AAAnB,CADa,EAEb;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CAFa,EAGb;AAAED,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,KAAK,EAAE;AAAxB,CAHa,EAIb;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CAJa,EAKb;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CALa,EAMb;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CANa,EAOb;AAAED,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,KAAK,EAAE;AAAxB,CAPa,EAQb;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CARa,EASb;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CATa,EAUb;AAAED,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,KAAK,EAAE;AAA7B,CAVa,EAWb;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAXa,CAAf;AAaA,MAAMC,kBAAkB,GAAG;AACzB;AACA;AACAC,EAAAA,OAAO,EAAE,OAAO,EAAP,GAAY,CAHI,CAGF;;AAHE,CAA3B;;AAMA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAf;AACA,QAAMT,IAAI,GAAGK,MAAM,CAACK,GAAP,CAAW,YAAX,CAAb;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAACS,IAAI,IAAI,CAAT,CAA1C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACwB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC0B,eAAD,EAAkBC,kBAAlB,IAAwC3B,QAAQ,CAAC,EAAD,CAAtD,CANgB,CAOhB;;AACA,QAAM,CAACiB,QAAD,EAAWW,WAAX,IAA0B5B,QAAQ,CAAC,EAAD,CAAxC,CARgB,CAShB;;AAEA,QAAM6B,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAlB,CAXgB,CAahB;;AACA,QAAMC,aAAa,GAAGC,QAAQ,IAAI;AAChC,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BF,QAAQ,CAACG,MAAzC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BL,QAA1B;AACAH,IAAAA,YAAY,CAACS,OAAb,CAAqB,QAArB,EAA+BN,QAAQ,CAACG,MAAxC;;AACA,QAAGF,QAAQ,KAAKjB,QAAQ,CAAC,CAAD,CAArB,IAA4BkB,SAAS,KAAKlB,QAAQ,CAAC,CAAD,CAArD,EAA0D;AACxDW,MAAAA,WAAW,CAAC,CACVM,QADU,EAEVC,SAFU,CAAD,CAAX;AAID;AACF,GAVD,CAdgB,CA0BhB;;;AACA,QAAMK,WAAW,GAAGhB,KAAK,IAAI;AAC3BC,IAAAA,QAAQ,CAACD,KAAK,CAACiB,OAAP,CAAR;AACD,GAFD,CA3BgB,CA8BhB;;;AAEA,MAAG,CAACC,SAAS,CAACC,WAAd,EAA2B;AACzBN,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACD,GAFD,MAEO;AACL;AACAI,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCZ,aAAzC,EAAwDQ,WAAxD;AACD;;AAED,QAAMK,WAAW,GAAG,OAAOX,QAAP,EAAiBC,SAAjB,KAA+B;AACjD,QAAI;AACF,UAAGD,QAAQ,IAAIC,SAAf,EAA0B;AACxB,cAAMW,QAAQ,GAAG,MAAM5C,KAAK,CAACiB,GAAN,CAAY,kDAAiDe,QAAS,IAAGC,SAAU,QAAO5B,kBAAmB,EAA7G,CAAvB;;AACA,YAAGuC,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsB,CAAtB,CAAH,EAA6B;AAC3BrB,UAAAA,kBAAkB,CAAC;AAAClB,YAAAA,IAAI,EAAEqC,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBC,UAAzB,CAAoCC,OAA3C;AAAoDxC,YAAAA,KAAK,EAAEoC,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBG,WAAzB,CAAqCC;AAAhG,WAAD,CAAlB;AACD;AACF,OALD,MAKO,CAEN;AACF,KATD,CASE,OAAOC,GAAP,EAAY;AACZ,UAAI9C,kBAAkB,CAAC+C,MAAnB,KAA8B,CAAlC,EAAqC;AACnC7B,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ,CAAC4B,GAAG,CAACE,KAAL,CAAR;AACD;AACF;AACF,GAjBD;;AAmBA,QAAMC,iBAAiB,GAAG,OAAOtB,QAAP,EAAiBC,SAAjB,EAA4BsB,MAA5B,KAAuC;AAC/D,QAAIC,WAAW,GAAG,EAAlB;;AACA,QAAG,CAACD,MAAJ,EAAY;AACVC,MAAAA,WAAW,GAAG;AACZC,QAAAA,GAAG,EAAEzB,QADO;AAEZ0B,QAAAA,GAAG,EAAEzB,SAFO;AAGZ0B,QAAAA,IAAI,EAAE,OAHM;AAIZC,QAAAA,KAAK,EAAExD,oBAJK;AAKZyD,QAAAA,KAAK,EAAE;AALK,OAAd;AAOD,KARD,MAQO;AACLL,MAAAA,WAAW,GAAG;AACZM,QAAAA,CAAC,EAAEP,MADS;AAEZI,QAAAA,IAAI,EAAE,OAFM;AAGZC,QAAAA,KAAK,EAAExD,oBAHK;AAIZyD,QAAAA,KAAK,EAAE;AAJK,OAAd;AAMD;;AACD,QAAI;AACF1B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,IAAI,CAACC,SAAL,CAAeR,WAAf,CAAZ;;AACA,UAAGO,IAAI,CAACC,SAAL,CAAeR,WAAf,MAAgC,IAAnC,EAAyC;AACvC,cAAMZ,QAAQ,GAAG,MAAM5C,KAAK,CAACiB,GAAN,CACrB,kDADqB,EAErB;AACEL,UAAAA,MAAM,EAAE4C;AADV,SAFqB,CAAvB;AAMA,cAAMS,aAAa,GAAGrB,QAAQ,CAACC,IAAT,CAAcqB,IAAd,CAAmBC,GAAnB,CAAwBtB,IAAD,KAAW;AACtDuB,UAAAA,EAAE,EAAEvB,IAAI,CAACuB,EAD6C;AAEtDC,UAAAA,IAAI,EAAExB,IAAI,CAACyB,IAAL,CAAUD,IAFsC;AAGtDE,UAAAA,QAAQ,EAAE1B,IAAI,CAACyB,IAAL,CAAUC,QAHkC;AAItDC,UAAAA,QAAQ,EAAE3B,IAAI,CAACyB,IAAL,CAAUE,QAJkC;AAKtDC,UAAAA,QAAQ,EAAE5B,IAAI,CAACyB,IAAL,CAAUG,QALkC;AAMtDC,UAAAA,IAAI,EAAE7B,IAAI,CAAC8B,OAAL,CAAa,CAAb,EAAgBD,IANgC;AAOtDE,UAAAA,IAAI,EAAE/B,IAAI,CAAC8B,OAAL,CAAa,CAAb,EAAgBE,WAPgC;AAQtDC,UAAAA,MAAM,EAAEjC,IAAI,CAACiC,MAAL,CAAYC,GARkC;AAStDC,UAAAA,IAAI,EAAEnC,IAAI,CAACmC,IAAL,CAAUC;AATsC,SAAX,CAAvB,CAAtB;AAWA5D,QAAAA,WAAW,CAAC4C,aAAD,CAAX;AACD;AACF,KAtBD,CAsBE,OAAOd,GAAP,EAAY;AACZ,UAAI/C,oBAAoB,CAACgD,MAArB,KAAgC,CAApC,EAAuC;AACrC;AACA,cAAMa,aAAa,GAAG9D,QAAQ,CAAC+D,IAAT,CAAcC,GAAd,CAAmBtB,IAAD,KAAW;AACjDuB,UAAAA,EAAE,EAAEvB,IAAI,CAACuB,EADwC;AAEjDC,UAAAA,IAAI,EAAExB,IAAI,CAACyB,IAAL,CAAUD,IAFiC;AAGjDE,UAAAA,QAAQ,EAAE1B,IAAI,CAACyB,IAAL,CAAUC,QAH6B;AAIjDC,UAAAA,QAAQ,EAAE3B,IAAI,CAACyB,IAAL,CAAUE,QAJ6B;AAKjDC,UAAAA,QAAQ,EAAE5B,IAAI,CAACyB,IAAL,CAAUG,QAL6B;AAMjDC,UAAAA,IAAI,EAAE7B,IAAI,CAAC8B,OAAL,CAAa,CAAb,EAAgBD,IAN2B;AAOjDE,UAAAA,IAAI,EAAE/B,IAAI,CAAC8B,OAAL,CAAa,CAAb,EAAgBE,WAP2B;AAQjDC,UAAAA,MAAM,EAAEjC,IAAI,CAACiC,MAAL,CAAYC,GAR6B;AASjDC,UAAAA,IAAI,EAAEnC,IAAI,CAACmC,IAAL,CAAUC;AATiC,SAAX,CAAlB,CAAtB;AAWA5D,QAAAA,WAAW,CAAC4C,aAAD,CAAX;AACA1C,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,OAfD,MAeO;AACLA,QAAAA,QAAQ,CAAC4B,GAAG,CAACE,KAAL,CAAR;AACD;AACF;AACF,GA5DD;;AA8DAtD,EAAAA,SAAS,CAAC,MAAM;AACduD,IAAAA,iBAAiB,CAAC,GAAGvC,QAAJ,CAAjB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAxHgB,CA0HA;AAEhB;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACGO,KAAK,CAAC8B,MAAN,KAAiB,CAAjB,gBACC,QAAC,aAAD;AACE,MAAA,MAAM,EAAE;AACNrC,QAAAA,QAAQ,EAAET,MAAM,CAACY,SAAD,CAAN,CAAkBV,KADtB;AAEN0E,QAAAA,IAAI,EAAE,QAFA;AAGNC,QAAAA,MAAM,EAAE,OAHF;AAINC,QAAAA,eAAe,EAAE,MAAM;AACrB,cAAIlE,SAAS,GAAG,CAAZ,IAAiBZ,MAAM,CAAC8C,MAA5B,EAAoC;AAClCjC,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACAmC,YAAAA,iBAAiB,CAAChD,MAAM,CAAC,CAAD,CAAN,CAAUC,IAAX,CAAjB;AACD,WAHD,MAGO;AACLY,YAAAA,YAAY,CAACD,SAAS,GAAG,CAAb,CAAZ;AACAoC,YAAAA,iBAAiB,CAAChD,MAAM,CAACY,SAAS,GAAG,CAAb,CAAN,CAAsBX,IAAvB,CAAjB;AACD;AACF;AAZK,OADV;AAeE,MAAA,QAAQ,EAAEa;AAfZ;AAAA;AAAA;AAAA;AAAA,YADD,gBAmBC;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AApBJ;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CA5JD;;GAAMX,G;;KAAAA,G;AA8JN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { useCurrentLocation } from './hooks/useCurrentLocation';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget';\n// mock data for testing without API call\nimport testData from './testData.json';\n\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nconst cities = [\n  { city: '', label: '' },\n  { city: 'taipei', label: 'ðŸ‡¹ðŸ‡¼ Taipei' },\n  { city: 'tokyo', label: 'ðŸ‡¯ðŸ‡µ Tokyo' },\n  { city: 'moscow', label: 'ðŸ‡·ðŸ‡º Moscow' },\n  { city: 'sydney', label: 'ðŸ‡¦ðŸ‡º Sydney' },\n  { city: 'london', label: 'ðŸ‡¬ðŸ‡§ London' },\n  { city: 'paris', label: 'ðŸ‡«ðŸ‡· Paris' },\n  { city: 'mexico', label: 'ðŸ‡²ðŸ‡½ Mexico' },\n  { city: 'seattle', label: 'ðŸ‡ºðŸ‡¸ Seattle' },\n  { city: 'washington', label: 'ðŸ‡ºðŸ‡¸ Washington' },\n  { city: 'beijing', label: 'ðŸ‡¨ðŸ‡³ Beijing' },\n];\nconst geolocationOptions = {\n  // Using this option you can define when should the location request timeout and\n  // call the error callback with timeout message.\n  timeout: 1000 * 60 * 1 // 1 min (1000 ms * 60 sec * 1 minute = 60 000ms)\n};\n\nconst App = () => {\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityIndex, setCityIndex] = useState(city || 0); \n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState('');\n  const [currentCityInfo, setCurrentCityInfo] = useState({});\n  // store location in state\n  const [location, setLocation] = useState([]);\n  // store error message in state\n\n  const oldCoords = localStorage.getItem('coords');\n\n  // Success handler for geolocation's `getCurrentPosition` method\n  const handleSuccess = position => {\n    const { latitude, longitude } = position.coords;\n    console.log('in success', position);\n    localStorage.setItem('coords', position.coords);\n    if(latitude !== location[0] && longitude !== location[1]) {\n      setLocation([\n        latitude,\n        longitude\n      ]);\n    }\n  };\n\n  // Error handler for geolocation's `getCurrentPosition` method\n  const handleError = error => {\n    setError(error.message);\n  };\n  // ...\n\n  if(!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    // console.log('Locatingâ€¦');\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n  }\n\n  const getCityName = async (latitude, longitude) => {\n    try {\n      if(latitude && longitude) {\n        const response = await axios.get( `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n        if(response.data.results[0]) {\n          setCurrentCityInfo({city: response.data.results[0].components.village, label: response.data.results[0].annotations.flag});\n        }\n      } else {\n        \n      }\n    } catch (err) {\n      if (OPEN_CAGE_DATA_KEY.length === 0) {\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  }\n\n  const fetchWeatherAsync = async (latitude, longitude, cityId) => {\n    let queryParams = {}\n    if(!cityId) {\n      queryParams = {\n        lat: latitude,\n        lon: longitude,\n        lang: 'en_us',\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: 'metric',\n      }\n    } else {\n      queryParams = {\n        q: cityId,\n        lang: 'en_us',\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: 'metric',\n      };\n    }\n    try {\n      console.log(JSON.stringify(queryParams));\n      if(JSON.stringify(queryParams) !== '{}') {\n        const response = await axios.get(\n          'https://api.openweathermap.org/data/2.5/forecast',\n          {\n            params: queryParams,\n          },\n        );\n        const transformData = response.data.list.map((data) => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed,\n        }));\n        setForecast(transformData);\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = testData.list.map((data) => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed,\n        }));\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchWeatherAsync(...location);\n  }, [location]); // notice the empty array here\n\n  // useEffect(() => {\n  //   getCityName(location.latitude, location.longitude);\n  // }, [location]);\n\n  return (\n    <div className=\"App\">\n      {error.length === 0 ? (\n        <WeatherWidget\n          config={{\n            location: cities[cityIndex].label,\n            unit: 'metric',\n            locale: 'zh-tw',\n            onLocationClick: () => {\n              if (cityIndex + 1 >= cities.length) {\n                setCityIndex(0);\n                fetchWeatherAsync(cities[0].city);\n              } else {\n                setCityIndex(cityIndex + 1);\n                fetchWeatherAsync(cities[cityIndex + 1].city);\n              }\n            },\n          }}\n          forecast={forecast}\n        />\n      ) : (\n        <div>\n          <h2>Unable to fetch weather data!</h2>\n          <pre>{error}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}