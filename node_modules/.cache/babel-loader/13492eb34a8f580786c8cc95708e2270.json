{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nexport const useCurrentLocation = (options, callback) => {\n  _s();\n\n  // store location in state\n  const [location, setLocation] = useState({}); // store error message in state\n\n  const [error, setError] = useState(); // Success handler for geolocation's `getCurrentPosition` method\n\n  const handleSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    localStorage.setItem('coords', position.coords);\n    setLocation({\n      latitude,\n      longitude\n    });\n  }; // Error handler for geolocation's `getCurrentPosition` method\n\n\n  const handleError = error => {\n    setError(error.message);\n  }; // ...\n\n\n  if (!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    console.log('Locating…');\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError, options);\n  } // Expose location result and the possible error message\n\n\n  return {\n    location,\n    error\n  };\n};\n\n_s(useCurrentLocation, \"sj381J10IjsmKiMZsaPWBokc3sY=\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/hooks/useCurrentLocation.js"],"names":["useState","useCurrentLocation","options","callback","location","setLocation","error","setError","handleSuccess","position","latitude","longitude","coords","localStorage","setItem","handleError","message","navigator","geolocation","console","log","getCurrentPosition"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AAAA;;AACvD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC,CAFuD,CAGvD;;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC,CAJuD,CAMvD;;AACA,QAAMQ,aAAa,GAAGC,QAAQ,IAAI;AAChC,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BF,QAAQ,CAACG,MAAzC;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BL,QAAQ,CAACG,MAAxC;AACAP,IAAAA,WAAW,CAAC;AACVK,MAAAA,QADU;AAEVC,MAAAA;AAFU,KAAD,CAAX;AAID,GAPD,CAPuD,CAgBvD;;;AACA,QAAMI,WAAW,GAAGT,KAAK,IAAI;AAC3BC,IAAAA,QAAQ,CAACD,KAAK,CAACU,OAAP,CAAR;AACD,GAFD,CAjBuD,CAoBvD;;;AAEA,MAAG,CAACC,SAAS,CAACC,WAAd,EAA2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAH,IAAAA,SAAS,CAACC,WAAV,CAAsBG,kBAAtB,CAAyCb,aAAzC,EAAwDO,WAAxD,EAAqEb,OAArE;AACD,GA3BsD,CA6BvD;;;AACA,SAAO;AAAEE,IAAAA,QAAF;AAAYE,IAAAA;AAAZ,GAAP;AACD,CA/BM;;GAAML,kB","sourcesContent":["import { useState } from 'react';\n\nexport const useCurrentLocation = (options, callback) => {\n  // store location in state\n  const [location, setLocation] = useState({});\n  // store error message in state\n  const [error, setError] = useState();\n\n  // Success handler for geolocation's `getCurrentPosition` method\n  const handleSuccess = position => {\n    const { latitude, longitude } = position.coords;\n    localStorage.setItem('coords', position.coords);\n    setLocation({\n      latitude,\n      longitude\n    });\n  };\n\n  // Error handler for geolocation's `getCurrentPosition` method\n  const handleError = error => {\n    setError(error.message);\n  };\n  // ...\n\n  if(!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    console.log('Locating…');\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError, options);\n  }\n\n  // Expose location result and the possible error message\n  return { location, error };\n}"]},"metadata":{},"sourceType":"module"}