{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget'; // mock data for testing without API call\n\nimport testData from './testData.json';\nimport transformDataFromApi from './utils/transformDataFromApi';\nimport { LOCATION_CONFIG, OPEN_WEATHER_MAP_KEY, OPEN_CAGE_DATA_KEY } from './constant/defaultConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // get weather forecast\n  const [forecast, setForecast] = useState([]); // use coordinate to get current City info\n\n  const [currentCityInfo, setCurrentCityInfo] = useState({}); // set state to get weather after coordinate is returned\n\n  const [shouldCallForWeather, setShouldCallForWeather] = useState(false); // set state to get city name after coordinate is returned\n\n  const [shouldCallForCityName, setShouldCallForCityName] = useState(false); // store location in state\n\n  const [location, setLocation] = useState([]); // store error message in state\n\n  const [error, setError] = useState(''); // TODO feature to store coordinates in local storage\n  // const oldCoords = localStorage.getItem('coords');\n  // Success handler for geolocation's `getCurrentPosition` method\n\n  const handleSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords; // localStorage.setItem('coords', position.coords);\n\n    if (latitude !== location[0] && longitude !== location[1]) {\n      setLocation([latitude, longitude]);\n      setShouldCallForWeather(true);\n      setShouldCallForCityName(true);\n    }\n  }; // Error handler for geolocation's `getCurrentPosition` method\n\n\n  const handleError = error => {\n    setError(error.message);\n  }; // ...\n\n\n  if (!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    // console.log('Locatingâ€¦');\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n  }\n\n  const getCityName = async (latitude, longitude) => {\n    try {\n      if (latitude && longitude) {\n        const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n\n        if (response.data.results[0]) {\n          setCurrentCityInfo({\n            city: `${response.data.results[0].components.village}, ${response.data.results[0].components.state} `,\n            label: response.data.results[0].annotations.flag\n          });\n          setShouldCallForCityName(false);\n        }\n      }\n    } catch (err) {\n      if (OPEN_CAGE_DATA_KEY.length === 0) {\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  const fetchWeatherAsync = async (latitude, longitude, cityId) => {\n    let queryParams = {};\n\n    if (!cityId) {\n      queryParams = {\n        lat: latitude,\n        lon: longitude,\n        lang: LOCATION_CONFIG.locale,\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: LOCATION_CONFIG.unit\n      };\n    } else {\n      queryParams = {\n        q: cityId,\n        lang: LOCATION_CONFIG.locale,\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: LOCATION_CONFIG.unit\n      };\n    }\n\n    try {\n      if (JSON.stringify(queryParams) !== '{}') {\n        const response = await axios.get('https://api.openweathermap.org/data/2.5/forecast', {\n          params: queryParams\n        });\n        const transformData = response.data.list.map(transformDataFromApi);\n        setForecast(transformData);\n        setShouldCallForWeather(false);\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = testData.list.map(transformDataFromApi);\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (shouldCallForWeather) {\n      fetchWeatherAsync(location[0], location[1]);\n    }\n  }, [shouldCallForWeather]); // notice the empty array here\n\n  useEffect(() => {\n    if (shouldCallForCityName) {\n      getCityName(location[0], location[1]);\n    }\n  }, [shouldCallForCityName]);\n  console.log(currentCityInfo);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: error.length === 0 ? /*#__PURE__*/_jsxDEV(WeatherWidget, {\n      config: {\n        city: currentCityInfo.city,\n        location: currentCityInfo.label,\n        locale: LOCATION_CONFIG.locale,\n        unit: LOCATION_CONFIG.unit\n      },\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Unable to fetch weather data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"+11hL7lngHRt1rEgjCflSG/EKcw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/App.js"],"names":["React","useState","useEffect","axios","WeatherWidget","testData","transformDataFromApi","LOCATION_CONFIG","OPEN_WEATHER_MAP_KEY","OPEN_CAGE_DATA_KEY","App","forecast","setForecast","currentCityInfo","setCurrentCityInfo","shouldCallForWeather","setShouldCallForWeather","shouldCallForCityName","setShouldCallForCityName","location","setLocation","error","setError","handleSuccess","position","latitude","longitude","coords","handleError","message","navigator","geolocation","console","log","getCurrentPosition","getCityName","response","get","data","results","city","components","village","state","label","annotations","flag","err","length","stack","fetchWeatherAsync","cityId","queryParams","lat","lon","lang","locale","appid","units","unit","q","JSON","stringify","params","transformData","list","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget';\n// mock data for testing without API call\nimport testData from './testData.json';\nimport transformDataFromApi from './utils/transformDataFromApi';\nimport { LOCATION_CONFIG, OPEN_WEATHER_MAP_KEY, OPEN_CAGE_DATA_KEY } from './constant/defaultConfig'\nconst App = () => {\n  // get weather forecast\n  const [forecast, setForecast] = useState([]);\n  // use coordinate to get current City info\n  const [currentCityInfo, setCurrentCityInfo] = useState({});\n  // set state to get weather after coordinate is returned\n  const [shouldCallForWeather, setShouldCallForWeather] = useState(false);\n  // set state to get city name after coordinate is returned\n  const [shouldCallForCityName, setShouldCallForCityName] = useState(false);\n  // store location in state\n  const [location, setLocation] = useState([]);\n  // store error message in state\n  const [error, setError] = useState('');\n  \n  // TODO feature to store coordinates in local storage\n  // const oldCoords = localStorage.getItem('coords');\n\n  // Success handler for geolocation's `getCurrentPosition` method\n  const handleSuccess = position => {\n    const { latitude, longitude } = position.coords;\n    // localStorage.setItem('coords', position.coords);\n    if(latitude !== location[0] && longitude !== location[1]) {\n      setLocation([\n        latitude,\n        longitude\n      ]);\n      setShouldCallForWeather(true);\n      setShouldCallForCityName(true);\n    }\n  };\n\n  // Error handler for geolocation's `getCurrentPosition` method\n  const handleError = error => {\n    setError(error.message);\n  };\n  // ...\n\n  if(!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    // console.log('Locatingâ€¦');\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n  }\n\n  const getCityName = async (latitude, longitude) => {\n    try {\n      if(latitude && longitude) {\n        const response = await axios.get( `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n        if(response.data.results[0]) {\n          setCurrentCityInfo({city: `${response.data.results[0].components.village}, ${response.data.results[0].components.state} `, label: response.data.results[0].annotations.flag});\n          setShouldCallForCityName(false);\n        }\n      }\n    } catch (err) {\n      if (OPEN_CAGE_DATA_KEY.length === 0) {\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  }\n\n  const fetchWeatherAsync = async (latitude, longitude, cityId) => {\n    let queryParams = {}\n    if(!cityId) {\n      queryParams = {\n        lat: latitude,\n        lon: longitude,\n        lang: LOCATION_CONFIG.locale,\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: LOCATION_CONFIG.unit,\n      }\n    } else {\n      queryParams = {\n        q: cityId,\n        lang: LOCATION_CONFIG.locale,\n        appid: OPEN_WEATHER_MAP_KEY,\n        units: LOCATION_CONFIG.unit,\n      };\n    }\n    try {\n      if(JSON.stringify(queryParams) !== '{}') {\n        const response = await axios.get(\n          'https://api.openweathermap.org/data/2.5/forecast',\n          {\n            params: queryParams,\n          },\n        );\n        const transformData = response.data.list.map(transformDataFromApi);\n        setForecast(transformData);\n        setShouldCallForWeather(false);\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = testData.list.map(transformDataFromApi);\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if(shouldCallForWeather) {\n      fetchWeatherAsync(location[0], location[1]);\n    }\n  }, [shouldCallForWeather]); // notice the empty array here\n\n  useEffect(() => {\n    if(shouldCallForCityName) {\n      getCityName(location[0], location[1]);\n    }\n  }, [shouldCallForCityName]);\n  console.log(currentCityInfo);\n  return (\n    <div className=\"App\">\n      {error.length === 0 ? (\n        <WeatherWidget\n          config={{\n            city: currentCityInfo.city,\n            location: currentCityInfo.label,\n            locale: LOCATION_CONFIG.locale,\n            unit: LOCATION_CONFIG.unit,\n          }}\n          forecast={forecast}\n        />\n      ) : (\n        <div>\n          <h2>Unable to fetch weather data!</h2>\n          <pre>{error}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}