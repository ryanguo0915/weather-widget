{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nexport const useCurrentLocation = (options, callback) => {\n  _s();\n\n  // store location in state\n  const [location, setLocation] = useState(); // store error message in state\n\n  const [error, setError] = useState();\n  const [cityInfo, setCityInfo] = useState({});\n\n  const getCityName = async ({\n    latitude,\n    longitude\n  }) => {\n    try {\n      const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n      console.log(response.data.results[0]);\n\n      if (response.data.results[0]) {\n        setCityInfo({\n          city: response.data.results[0].components.village,\n          label: response.data.results[0].annotations.flag\n        });\n      }\n    } catch (err) {\n      if (OPEN_CAGE_DATA_KEY.length === 0) {\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  }; // Success handler for geolocation's `getCurrentPosition` method\n\n\n  const handleSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    setLocation({\n      latitude,\n      longitude\n    });\n    getCityName({\n      latitude,\n      longitude\n    });\n  }; // Error handler for geolocation's `getCurrentPosition` method\n\n\n  const handleError = error => {\n    setError(error.message);\n  }; // ...\n\n\n  if (!navigator.geolocation) {\n    console.log('Geolocation is not supported by your browser');\n  } else {\n    console.log('Locating…');\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError, options);\n  } // Expose location result and the possible error message\n\n\n  return {\n    location,\n    error,\n    cityInfo\n  };\n};\n\n_s(useCurrentLocation, \"SiHmzt1VL9PuB9k/ZbRdQUVO+FA=\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/hooks/useCurrentLocation.js"],"names":["useState","OPEN_CAGE_DATA_KEY","useCurrentLocation","options","callback","location","setLocation","error","setError","cityInfo","setCityInfo","getCityName","latitude","longitude","response","axios","get","console","log","data","results","city","components","village","label","annotations","flag","err","length","stack","handleSuccess","position","coords","handleError","message","navigator","geolocation","getCurrentPosition"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,MAAMC,kBAAkB,GAAG,kCAA3B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,OAAD,EAASC,QAAT,KAAsB;AAAA;;AACtD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,EAAxC,CAFsD,CAGtD;;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMW,WAAW,GAAG,OAAO;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAP,KAAmC;AACrD,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAY,kDAAiDJ,QAAS,IAAGC,SAAU,QAAOZ,kBAAmB,EAA7G,CAAvB;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,IAAT,CAAcC,OAAd,CAAsB,CAAtB,CAAZ;;AACA,UAAGN,QAAQ,CAACK,IAAT,CAAcC,OAAd,CAAsB,CAAtB,CAAH,EAA6B;AAC3BV,QAAAA,WAAW,CAAC;AAACW,UAAAA,IAAI,EAAEP,QAAQ,CAACK,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBE,UAAzB,CAAoCC,OAA3C;AAAoDC,UAAAA,KAAK,EAAEV,QAAQ,CAACK,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBK,WAAzB,CAAqCC;AAAhG,SAAD,CAAX;AACD;AACF,KAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAI1B,kBAAkB,CAAC2B,MAAnB,KAA8B,CAAlC,EAAqC;AACnCpB,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ,CAACmB,GAAG,CAACE,KAAL,CAAR;AACD;AACF;AACF,GAdD,CAPsD,CAsBtD;;;AACA,QAAMC,aAAa,GAAGC,QAAQ,IAAI;AAChC,UAAM;AAAEnB,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BkB,QAAQ,CAACC,MAAzC;AAEA1B,IAAAA,WAAW,CAAC;AACVM,MAAAA,QADU;AAEVC,MAAAA;AAFU,KAAD,CAAX;AAIAF,IAAAA,WAAW,CAAC;AACVC,MAAAA,QADU;AAEVC,MAAAA;AAFU,KAAD,CAAX;AAID,GAXD,CAvBsD,CAoCtD;;;AACA,QAAMoB,WAAW,GAAG1B,KAAK,IAAI;AAC3BC,IAAAA,QAAQ,CAACD,KAAK,CAAC2B,OAAP,CAAR;AACD,GAFD,CArCsD,CAwCtD;;;AAEA,MAAG,CAACC,SAAS,CAACC,WAAd,EAA2B;AACrBnB,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACH,GAFH,MAES;AACHD,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAiB,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCP,aAAzC,EAAwDG,WAAxD,EAAqE9B,OAArE;AACH,GA/CmD,CAgDtD;;;AACA,SAAO;AAAEE,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CAlDM;;GAAMP,kB","sourcesContent":["import { useState } from 'react';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\n\nexport const useCurrentLocation = (options,callback) => {\n  // store location in state\n  const [location, setLocation] = useState();\n  // store error message in state\n  const [error, setError] = useState();\n  const [cityInfo, setCityInfo] = useState({});\n\n  const getCityName = async ({ latitude, longitude }) => {\n    try {\n      const response = await axios.get( `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n      console.log(response.data.results[0]);\n      if(response.data.results[0]) {\n        setCityInfo({city: response.data.results[0].components.village, label: response.data.results[0].annotations.flag});\n      }\n    } catch (err) {\n      if (OPEN_CAGE_DATA_KEY.length === 0) {\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  }\n  // Success handler for geolocation's `getCurrentPosition` method\n  const handleSuccess = position => {\n    const { latitude, longitude } = position.coords;\n\n    setLocation({\n      latitude,\n      longitude\n    });\n    getCityName({\n      latitude,\n      longitude\n    })\n  };\n\n  // Error handler for geolocation's `getCurrentPosition` method\n  const handleError = error => {\n    setError(error.message);\n  };\n  // ...\n\n  if(!navigator.geolocation) {\n        console.log('Geolocation is not supported by your browser');\n    } else {\n        console.log('Locating…');\n        navigator.geolocation.getCurrentPosition(handleSuccess, handleError, options);\n    }    \n  // Expose location result and the possible error message\n  return { location, error, cityInfo };\n}"]},"metadata":{},"sourceType":"module"}