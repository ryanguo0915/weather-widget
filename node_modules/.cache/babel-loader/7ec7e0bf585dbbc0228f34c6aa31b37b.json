{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { useCurrentLocation } from './hooks/useCurrentLocation';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget'; // mock data for testing without API call\n\nimport testData from './testData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nconst cities = [{\n  city: 'taipei',\n  label: 'ðŸ‡¹ðŸ‡¼ Taipei'\n}, {\n  city: 'tokyo',\n  label: 'ðŸ‡¯ðŸ‡µ Tokyo'\n}, {\n  city: 'moscow',\n  label: 'ðŸ‡·ðŸ‡º Moscow'\n}, {\n  city: 'sydney',\n  label: 'ðŸ‡¦ðŸ‡º Sydney'\n}, {\n  city: 'london',\n  label: 'ðŸ‡¬ðŸ‡§ London'\n}, {\n  city: 'paris',\n  label: 'ðŸ‡«ðŸ‡· Paris'\n}, {\n  city: 'mexico',\n  label: 'ðŸ‡²ðŸ‡½ Mexico'\n}, {\n  city: 'seattle',\n  label: 'ðŸ‡ºðŸ‡¸ Seattle'\n}, {\n  city: 'washington',\n  label: 'ðŸ‡ºðŸ‡¸ Washington'\n}, {\n  city: 'beijing',\n  label: 'ðŸ‡¨ðŸ‡³ Beijing'\n}];\nconst geolocationOptions = {\n  // Using this option you can define when should the location request timeout and\n  // call the error callback with timeout message.\n  timeout: 1000 * 60 * 1 // 1 min (1000 ms * 60 sec * 1 minute = 60 000ms)\n\n};\n\nconst App = () => {\n  _s();\n\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityIndex, setCityIndex] = useState(city || 0);\n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState('');\n  const {\n    location,\n    locationError,\n    cityInfo\n  } = useCurrentLocation(geolocationOptions, getCityName);\n  console.log(location, cityInfo);\n\n  const fetchWeatherAsync = async cityId => {\n    try {\n      const response = await axios.get('https://api.openweathermap.org/data/2.5/forecast', {\n        params: {\n          q: cityId,\n          lang: 'zh_tw',\n          appid: OPEN_WEATHER_MAP_KEY,\n          units: 'metric'\n        }\n      });\n      const transformData = await response.data.list.map(data => ({\n        dt: data.dt,\n        temp: data.main.temp,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        humidity: data.main.humidity,\n        icon: data.weather[0].icon,\n        desc: data.weather[0].description,\n        clouds: data.clouds.all,\n        wind: data.wind.speed\n      }));\n      setForecast(transformData);\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = await testData.list.map(data => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed\n        }));\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchWeatherAsync(cities[cityIndex].city);\n  }, []); // notice the empty array here\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: error.length === 0 ? /*#__PURE__*/_jsxDEV(WeatherWidget, {\n      config: {\n        location: cities[cityIndex].label,\n        unit: 'metric',\n        locale: 'zh-tw',\n        onLocationClick: () => {\n          if (cityIndex + 1 >= cities.length) {\n            setCityIndex(0);\n            fetchWeatherAsync(cities[0].city);\n          } else {\n            setCityIndex(cityIndex + 1);\n            fetchWeatherAsync(cities[cityIndex + 1].city);\n          }\n        }\n      },\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Unable to fetch weather data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"3d/siMS/F6EsLfHPKCAE+qoqMgo=\", false, function () {\n  return [useCurrentLocation];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/App.js"],"names":["React","useState","useEffect","axios","useCurrentLocation","WeatherWidget","testData","OPEN_WEATHER_MAP_KEY","OPEN_CAGE_DATA_KEY","cities","city","label","geolocationOptions","timeout","App","params","URLSearchParams","window","location","search","get","cityIndex","setCityIndex","forecast","setForecast","error","setError","locationError","cityInfo","getCityName","console","log","fetchWeatherAsync","cityId","response","q","lang","appid","units","transformData","data","list","map","dt","temp","main","temp_min","temp_max","humidity","icon","weather","desc","description","clouds","all","wind","speed","err","length","stack","unit","locale","onLocationClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { useCurrentLocation } from './hooks/useCurrentLocation';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget';\n// mock data for testing without API call\nimport testData from './testData.json';\n\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nconst cities = [\n  { city: 'taipei', label: 'ðŸ‡¹ðŸ‡¼ Taipei' },\n  { city: 'tokyo', label: 'ðŸ‡¯ðŸ‡µ Tokyo' },\n  { city: 'moscow', label: 'ðŸ‡·ðŸ‡º Moscow' },\n  { city: 'sydney', label: 'ðŸ‡¦ðŸ‡º Sydney' },\n  { city: 'london', label: 'ðŸ‡¬ðŸ‡§ London' },\n  { city: 'paris', label: 'ðŸ‡«ðŸ‡· Paris' },\n  { city: 'mexico', label: 'ðŸ‡²ðŸ‡½ Mexico' },\n  { city: 'seattle', label: 'ðŸ‡ºðŸ‡¸ Seattle' },\n  { city: 'washington', label: 'ðŸ‡ºðŸ‡¸ Washington' },\n  { city: 'beijing', label: 'ðŸ‡¨ðŸ‡³ Beijing' },\n];\nconst geolocationOptions = {\n  // Using this option you can define when should the location request timeout and\n  // call the error callback with timeout message.\n  timeout: 1000 * 60 * 1 // 1 min (1000 ms * 60 sec * 1 minute = 60 000ms)\n};\n\nconst App = () => {\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityIndex, setCityIndex] = useState(city || 0);\n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState('');\n\n  const { location, locationError, cityInfo } = useCurrentLocation(geolocationOptions, getCityName);\n  console.log(location,cityInfo);\n  const fetchWeatherAsync = async (cityId) => {\n    try {\n      const response = await axios.get(\n        'https://api.openweathermap.org/data/2.5/forecast',\n        {\n          params: {\n            q: cityId,\n            lang: 'zh_tw',\n            appid: OPEN_WEATHER_MAP_KEY,\n            units: 'metric',\n          },\n        },\n      );\n      const transformData = await response.data.list.map((data) => ({\n        dt: data.dt,\n        temp: data.main.temp,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        humidity: data.main.humidity,\n        icon: data.weather[0].icon,\n        desc: data.weather[0].description,\n        clouds: data.clouds.all,\n        wind: data.wind.speed,\n      }));\n      setForecast(transformData);\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        const transformData = await testData.list.map((data) => ({\n          dt: data.dt,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          humidity: data.main.humidity,\n          icon: data.weather[0].icon,\n          desc: data.weather[0].description,\n          clouds: data.clouds.all,\n          wind: data.wind.speed,\n        }));\n        setForecast(transformData);\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchWeatherAsync(cities[cityIndex].city);\n  }, []); // notice the empty array here\n\n  return (\n    <div className=\"App\">\n      {error.length === 0 ? (\n        <WeatherWidget\n          config={{\n            location: cities[cityIndex].label,\n            unit: 'metric',\n            locale: 'zh-tw',\n            onLocationClick: () => {\n              if (cityIndex + 1 >= cities.length) {\n                setCityIndex(0);\n                fetchWeatherAsync(cities[0].city);\n              } else {\n                setCityIndex(cityIndex + 1);\n                fetchWeatherAsync(cities[cityIndex + 1].city);\n              }\n            },\n          }}\n          forecast={forecast}\n        />\n      ) : (\n        <div>\n          <h2>Unable to fetch weather data!</h2>\n          <pre>{error}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}