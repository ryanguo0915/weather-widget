{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/components/MiniWeatherCard/MiniWeatherCard.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport styled from '@emotion/styled';\nimport iconCodeMapping from '../WeatherIcon';\n/**\n * Render a daily cards containing a weather icon and the minimum and maximum temperature\n *\n * @param {function} onClick clicking callback\n * @param {object[]} forecastList forecast data to render\n * @param {boolean} isSelected render whether it's selected or not\n * @param {string} unit the unit format for figures, only accepting 'metric' for now\n * @param {string} locale locale for time formating\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MiniWeatherCard = ({\n  onClick,\n  forecastList,\n  isSelected,\n  unit,\n  locale\n}) => {\n  if (forecastList !== undefined && forecastList.length > 0) {\n    const first = forecastList[0]; // find maximum and minimum temperature of the given list\n\n    const tempMaxAndMin = forecastList.reduce((acc, current) => {\n      if (current.temp_max > acc.max) {\n        acc.max = current.temp_max;\n      }\n\n      if (current.temp_min < acc.min) {\n        acc.min = current.temp_min;\n      }\n\n      return acc;\n    }, {\n      max: Number.MIN_VALUE,\n      min: Number.MAX_VALUE\n    });\n    return /*#__PURE__*/_jsxDEV(Root, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        onClick: onClick,\n        isSelected: isSelected,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: moment.unix(first.dt).locale(locale).format('dddd')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Icon, {\n          src: iconCodeMapping[first.icon]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: [Math.round(tempMaxAndMin.max * 10) / 10, \"\\xB0\", unit === 'metric' ? 'C' : 'F']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: [Math.round(tempMaxAndMin.min * 10) / 10, \"\\xB0\", unit === 'metric' ? 'C' : 'F']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 10\n  }, this);\n};\n\n_c = MiniWeatherCard;\nMiniWeatherCard.defaultProps = {\n  onClick: () => {},\n  isSelected: false,\n  unit: 'metric',\n  locale: 'zh-tw',\n  forecastList: []\n};\nMiniWeatherCard.propTypes = {\n  onClick: PropTypes.func,\n  forecastList: PropTypes.arrayOf(PropTypes.shape({\n    dt: PropTypes.number.isRequired,\n    temp: PropTypes.number.isRequired,\n    temp_min: PropTypes.number.isRequired,\n    temp_max: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    icon: PropTypes.string.isRequired,\n    desc: PropTypes.string.isRequired,\n    clouds: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired\n  })),\n  isSelected: PropTypes.bool,\n  unit: PropTypes.string,\n  locale: PropTypes.string\n};\nexport default MiniWeatherCard;\nconst Root = styled.div`\n  min-width: 20%;\n`;\n_c2 = Root;\nconst Container = styled.div`\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n  padding: 0.5rem 0.5rem;\n  background: ${props => props.isSelected ? '#F9F9F9' : 'inherit'};\n  border: ${props => props.isSelected ? '1px solid #DDDDDD' : 'none'};\n`;\n_c3 = Container;\nconst Text = styled.div`\n  text-align: center;\n  line-height: normal;\n  padding: 0.5rem 0rem;\n`;\n_c4 = Text;\nconst Icon = styled.img`\n  align-self: center;\n  line-height: normal;\n  width: 3rem;\n  height: 3rem;\n`;\n_c5 = Icon;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MiniWeatherCard\");\n$RefreshReg$(_c2, \"Root\");\n$RefreshReg$(_c3, \"Container\");\n$RefreshReg$(_c4, \"Text\");\n$RefreshReg$(_c5, \"Icon\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/components/MiniWeatherCard/MiniWeatherCard.jsx"],"names":["React","PropTypes","moment","styled","iconCodeMapping","MiniWeatherCard","onClick","forecastList","isSelected","unit","locale","undefined","length","first","tempMaxAndMin","reduce","acc","current","temp_max","max","temp_min","min","Number","MIN_VALUE","MAX_VALUE","unix","dt","format","icon","Math","round","defaultProps","propTypes","func","arrayOf","shape","number","isRequired","temp","humidity","string","desc","clouds","wind","bool","Root","div","Container","props","Text","Icon","img"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport styled from '@emotion/styled';\nimport iconCodeMapping from '../WeatherIcon';\n\n/**\n * Render a daily cards containing a weather icon and the minimum and maximum temperature\n *\n * @param {function} onClick clicking callback\n * @param {object[]} forecastList forecast data to render\n * @param {boolean} isSelected render whether it's selected or not\n * @param {string} unit the unit format for figures, only accepting 'metric' for now\n * @param {string} locale locale for time formating\n */\nconst MiniWeatherCard = ({\n  onClick,\n  forecastList,\n  isSelected,\n  unit,\n  locale,\n}) => {\n  if (forecastList !== undefined && forecastList.length > 0) {\n    const first = forecastList[0];\n    // find maximum and minimum temperature of the given list\n    const tempMaxAndMin = forecastList.reduce(\n      (acc, current) => {\n        if (current.temp_max > acc.max) {\n          acc.max = current.temp_max;\n        }\n        if (current.temp_min < acc.min) {\n          acc.min = current.temp_min;\n        }\n        return acc;\n      },\n      { max: Number.MIN_VALUE, min: Number.MAX_VALUE },\n    );\n    return (\n      <Root>\n        <Container onClick={onClick} isSelected={isSelected}>\n          <Text>{moment.unix(first.dt).locale(locale).format('dddd')}</Text>\n          <Icon src={iconCodeMapping[first.icon]} />\n          <Text>\n            {Math.round(tempMaxAndMin.max * 10) / 10}\n            &deg;\n            {unit === 'metric' ? 'C' : 'F'}\n          </Text>\n          <Text>\n            {Math.round(tempMaxAndMin.min * 10) / 10}\n            &deg;\n            {unit === 'metric' ? 'C' : 'F'}\n          </Text>\n        </Container>\n      </Root>\n    );\n  }\n  return <div />;\n};\n\nMiniWeatherCard.defaultProps = {\n  onClick: () => {},\n  isSelected: false,\n  unit: 'metric',\n  locale: 'zh-tw',\n  forecastList: [],\n};\n\nMiniWeatherCard.propTypes = {\n  onClick: PropTypes.func,\n  forecastList: PropTypes.arrayOf(\n    PropTypes.shape({\n      dt: PropTypes.number.isRequired,\n      temp: PropTypes.number.isRequired,\n      temp_min: PropTypes.number.isRequired,\n      temp_max: PropTypes.number.isRequired,\n      humidity: PropTypes.number.isRequired,\n      icon: PropTypes.string.isRequired,\n      desc: PropTypes.string.isRequired,\n      clouds: PropTypes.number.isRequired,\n      wind: PropTypes.number.isRequired,\n    }),\n  ),\n  isSelected: PropTypes.bool,\n  unit: PropTypes.string,\n  locale: PropTypes.string,\n};\n\nexport default MiniWeatherCard;\n\nconst Root = styled.div`\n  min-width: 20%;\n`;\n\nconst Container = styled.div`\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n  padding: 0.5rem 0.5rem;\n  background: ${(props) => (props.isSelected ? '#F9F9F9' : 'inherit')};\n  border: ${(props) => (props.isSelected ? '1px solid #DDDDDD' : 'none')};\n`;\n\nconst Text = styled.div`\n  text-align: center;\n  line-height: normal;\n  padding: 0.5rem 0rem;\n`;\n\nconst Icon = styled.img`\n  align-self: center;\n  line-height: normal;\n  width: 3rem;\n  height: 3rem;\n`;\n"]},"metadata":{},"sourceType":"module"}