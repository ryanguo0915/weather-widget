{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/components/WeatherBannerTab/WeatherBannerTab.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport styled from '@emotion/styled';\nimport WeatherBanner from '../WeatherBanner/WeatherBanner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherBannerTab = ({\n  location,\n  forecastOfDay,\n  locale,\n  unit,\n  onLocationClick\n}) => {\n  _s();\n\n  const [tabIndex, setTabIndex] = useState(0);\n\n  const renderTabPanel = (item, displayUnit) => {\n    return /*#__PURE__*/_jsxDEV(TabPanel, {\n      children: /*#__PURE__*/_jsxDEV(WeatherBanner, {\n        forecastNow: item,\n        unit: displayUnit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, `tp${item.dt}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderTab = (item, displayLocale) => {\n    const localeRegion = displayLocale || 'zh-tw';\n\n    if (item) {\n      return /*#__PURE__*/_jsxDEV(Tab, {\n        children: moment.unix(item.dt).locale(localeRegion).format('a h:mm')\n      }, `t${item.dt}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  };\n\n  const handle = params => {\n    const {\n      value,\n      dragging,\n      index,\n      ...restProps\n    } = params;\n    return /*#__PURE__*/_jsxDEV(Tooltip, {\n      prefixCls: \"rc-slider-tooltip\",\n      overlay: value,\n      visible: dragging,\n      placement: \"top\",\n      children: /*#__PURE__*/_jsxDEV(Handle, {\n        value: value,\n        ...restProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  };\n\n  const marks = {};\n  forecastOfDay.forEach((item, index) => {\n    marks[index] = item.moment.locale(locale).format('a h:mm');\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(LocationText, {\n      onClick: onLocationClick,\n      children: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TabContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherBannerTab, \"7U1n23VNKszU1OlII0iXqCfwam0=\");\n\n_c = WeatherBannerTab;\nWeatherBannerTab.defaultProps = {\n  unit: 'metric',\n  forecastOfDay: []\n};\nWeatherBannerTab.propTypes = {\n  location: PropTypes.string.isRequired,\n  forecastOfDay: PropTypes.arrayOf(PropTypes.shape({\n    dt: PropTypes.number.isRequired,\n    temp: PropTypes.number.isRequired,\n    temp_min: PropTypes.number.isRequired,\n    temp_max: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    icon: PropTypes.string.isRequired,\n    desc: PropTypes.string.isRequired,\n    clouds: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired\n  })),\n  unit: PropTypes.string\n};\nexport default WeatherBannerTab;\nconst LocationText = styled.div`\n  font-size: 2rem;\n`;\n_c2 = LocationText;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n_c3 = Container;\nconst TabContainer = styled.div`\n  margin: 0.8rem 0.8rem;\n  padding-bottom: 1.5rem;\n`;\n_c4 = TabContainer;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"WeatherBannerTab\");\n$RefreshReg$(_c2, \"LocationText\");\n$RefreshReg$(_c3, \"Container\");\n$RefreshReg$(_c4, \"TabContainer\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/components/WeatherBannerTab/WeatherBannerTab.jsx"],"names":["React","useState","PropTypes","moment","styled","WeatherBanner","WeatherBannerTab","location","forecastOfDay","locale","unit","onLocationClick","tabIndex","setTabIndex","renderTabPanel","item","displayUnit","dt","renderTab","displayLocale","localeRegion","unix","format","handle","params","value","dragging","index","restProps","marks","forEach","defaultProps","propTypes","string","isRequired","arrayOf","shape","number","temp","temp_min","temp_max","humidity","icon","desc","clouds","wind","LocationText","div","Container","TabContainer"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport styled from '@emotion/styled';\nimport WeatherBanner from '../WeatherBanner/WeatherBanner';\n\nconst WeatherBannerTab = ({\n  location,\n  forecastOfDay,\n  locale,\n  unit,\n  onLocationClick,\n}) => {\n  const [tabIndex, setTabIndex] = useState(0);\n\n  const renderTabPanel = (item, displayUnit) => {\n    return (\n      <TabPanel key={`tp${item.dt}`}>\n        <WeatherBanner forecastNow={item} unit={displayUnit} />\n      </TabPanel>\n    );\n  };\n\n  const renderTab = (item, displayLocale) => {\n    const localeRegion = displayLocale || 'zh-tw';\n    if (item) {\n      return (\n        <Tab key={`t${item.dt}`}>\n          {moment.unix(item.dt).locale(localeRegion).format('a h:mm')}\n        </Tab>\n      );\n    }\n    return <div />;\n  };\n\n  const handle = (params) => {\n    const { value, dragging, index, ...restProps } = params;\n    return (\n      <Tooltip\n        prefixCls=\"rc-slider-tooltip\"\n        overlay={value}\n        visible={dragging}\n        placement=\"top\"\n        key={index}\n      >\n        <Handle value={value} {...restProps} />\n      </Tooltip>\n    );\n  };\n\n  const marks = {};\n  forecastOfDay.forEach((item, index) => {\n    marks[index] = item.moment.locale(locale).format('a h:mm');\n  });\n\n  return (\n    <Container>\n      <LocationText onClick={onLocationClick}>{location}</LocationText>\n      <TabContainer>\n      </TabContainer>\n    </Container>\n  );\n};\n\nWeatherBannerTab.defaultProps = {\n  unit: 'metric',\n  forecastOfDay: [],\n};\n\nWeatherBannerTab.propTypes = {\n  location: PropTypes.string.isRequired,\n  forecastOfDay: PropTypes.arrayOf(\n    PropTypes.shape({\n      dt: PropTypes.number.isRequired,\n      temp: PropTypes.number.isRequired,\n      temp_min: PropTypes.number.isRequired,\n      temp_max: PropTypes.number.isRequired,\n      humidity: PropTypes.number.isRequired,\n      icon: PropTypes.string.isRequired,\n      desc: PropTypes.string.isRequired,\n      clouds: PropTypes.number.isRequired,\n      wind: PropTypes.number.isRequired,\n    }),\n  ),\n  unit: PropTypes.string,\n};\n\nexport default WeatherBannerTab;\n\nconst LocationText = styled.div`\n  font-size: 2rem;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n\nconst TabContainer = styled.div`\n  margin: 0.8rem 0.8rem;\n  padding-bottom: 1.5rem;\n`;\n"]},"metadata":{},"sourceType":"module"}