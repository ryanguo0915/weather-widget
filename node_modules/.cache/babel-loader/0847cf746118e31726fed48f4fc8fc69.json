{"ast":null,"code":"var _jsxFileName = \"/Users/yujiaguo/Documents/github/weather-widget/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport getUserGeolocation from './utils/getUserGeolocation';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget'; // mock data for testing without API call\n\nimport testData from './testData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nconst cities = [{\n  city: 'taipei',\n  label: 'ðŸ‡¹ðŸ‡¼ Taipei'\n}, {\n  city: 'tokyo',\n  label: 'ðŸ‡¯ðŸ‡µ Tokyo'\n}, {\n  city: 'moscow',\n  label: 'ðŸ‡·ðŸ‡º Moscow'\n}, {\n  city: 'sydney',\n  label: 'ðŸ‡¦ðŸ‡º Sydney'\n}, {\n  city: 'london',\n  label: 'ðŸ‡¬ðŸ‡§ London'\n}, {\n  city: 'paris',\n  label: 'ðŸ‡«ðŸ‡· Paris'\n}, {\n  city: 'mexico',\n  label: 'ðŸ‡²ðŸ‡½ Mexico'\n}, {\n  city: 'seattle',\n  label: 'ðŸ‡ºðŸ‡¸ Seattle'\n}, {\n  city: 'washington',\n  label: 'ðŸ‡ºðŸ‡¸ Washington'\n}, {\n  city: 'beijing',\n  label: 'ðŸ‡¨ðŸ‡³ Beijing'\n}];\n\nconst App = () => {\n  _s();\n\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityCoord, setCityCoord] = useState({});\n  const [cityInfy, setCityInfo] = useState({});\n  const [cityIndex, setCityIndex] = useState(city || 0);\n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState('');\n\n  if (cityCoord == {}) {\n    setCityCoord(getUserGeolocation(navigator));\n  }\n\n  async function getCityName(latitude, longitude) {\n    try {\n      const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n      console.log(response.data.results[0]);\n\n      if (response.data.results[0]) {\n        setCityInfo({\n          city: response.data.results[0].components.village,\n          label: response.data.results[0].annotations.flag\n        });\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        // const transformData = await testData.list.map((data) => ({\n        //   dt: data.dt,\n        //   temp: data.main.temp,\n        //   temp_min: data.main.temp_min,\n        //   temp_max: data.main.temp_max,\n        //   humidity: data.main.humidity,\n        //   icon: data.weather[0].icon,\n        //   desc: data.weather[0].description,\n        //   clouds: data.clouds.all,\n        //   wind: data.wind.speed,\n        // }));\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  } // const fetchWeatherAsync = async (cityId) => {\n  //   try {\n  //     const response = await axios.get(\n  //       'https://api.openweathermap.org/data/2.5/forecast',\n  //       {\n  //         params: {\n  //           q: cityId,\n  //           lang: 'zh_tw',\n  //           appid: OPEN_WEATHER_MAP_KEY,\n  //           units: 'metric',\n  //         },\n  //       },\n  //     );\n  //     const transformData = await response.data.list.map((data) => ({\n  //       dt: data.dt,\n  //       temp: data.main.temp,\n  //       temp_min: data.main.temp_min,\n  //       temp_max: data.main.temp_max,\n  //       humidity: data.main.humidity,\n  //       icon: data.weather[0].icon,\n  //       desc: data.weather[0].description,\n  //       clouds: data.clouds.all,\n  //       wind: data.wind.speed,\n  //     }));\n  //     setForecast(transformData);\n  //   } catch (err) {\n  //     if (OPEN_WEATHER_MAP_KEY.length === 0) {\n  //       // Use mock data if no key\n  //       const transformData = await testData.list.map((data) => ({\n  //         dt: data.dt,\n  //         temp: data.main.temp,\n  //         temp_min: data.main.temp_min,\n  //         temp_max: data.main.temp_max,\n  //         humidity: data.main.humidity,\n  //         icon: data.weather[0].icon,\n  //         desc: data.weather[0].description,\n  //         clouds: data.clouds.all,\n  //         wind: data.wind.speed,\n  //       }));\n  //       setForecast(transformData);\n  //       setError('');\n  //     } else {\n  //       setError(err.stack);\n  //     }\n  //   }\n  // };\n  // useEffect(() => {\n  //   fetchWeatherAsync(cities[cityIndex].city);\n  // }, []); // notice the empty array here\n\n\n  useEffect(() => {\n    getCityName(cityCoord);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: error.length === 0 ? /*#__PURE__*/_jsxDEV(WeatherWidget, {\n      config: {\n        location: cities[cityIndex].label,\n        unit: 'metric',\n        locale: 'zh-tw',\n        onLocationClick: () => {\n          if (cityIndex + 1 >= cities.length) {\n            setCityIndex(0);\n            fetchWeatherAsync(cities[0].city);\n          } else {\n            setCityIndex(cityIndex + 1);\n            fetchWeatherAsync(cities[cityIndex + 1].city);\n          }\n        }\n      },\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Unable to fetch weather data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"OwCKTq7h/dFyRFIzHSE9WuNAvw0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yujiaguo/Documents/github/weather-widget/src/App.js"],"names":["React","useState","useEffect","axios","getUserGeolocation","WeatherWidget","testData","OPEN_WEATHER_MAP_KEY","OPEN_CAGE_DATA_KEY","cities","city","label","App","params","URLSearchParams","window","location","search","get","cityCoord","setCityCoord","cityInfy","setCityInfo","cityIndex","setCityIndex","forecast","setForecast","error","setError","navigator","getCityName","latitude","longitude","response","console","log","data","results","components","village","annotations","flag","err","length","stack","unit","locale","onLocationClick","fetchWeatherAsync"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport getUserGeolocation from './utils/getUserGeolocation';\nimport WeatherWidget from './components/WeatherWidget/WeatherWidget';\n// mock data for testing without API call\nimport testData from './testData.json';\n\nconst OPEN_WEATHER_MAP_KEY = '524589f12ff60e2a150e470595208862';\nconst OPEN_CAGE_DATA_KEY = '0264db5477fe4b1c9ee9ae23b3ec59e5';\nconst cities = [\n  { city: 'taipei', label: 'ðŸ‡¹ðŸ‡¼ Taipei' },\n  { city: 'tokyo', label: 'ðŸ‡¯ðŸ‡µ Tokyo' },\n  { city: 'moscow', label: 'ðŸ‡·ðŸ‡º Moscow' },\n  { city: 'sydney', label: 'ðŸ‡¦ðŸ‡º Sydney' },\n  { city: 'london', label: 'ðŸ‡¬ðŸ‡§ London' },\n  { city: 'paris', label: 'ðŸ‡«ðŸ‡· Paris' },\n  { city: 'mexico', label: 'ðŸ‡²ðŸ‡½ Mexico' },\n  { city: 'seattle', label: 'ðŸ‡ºðŸ‡¸ Seattle' },\n  { city: 'washington', label: 'ðŸ‡ºðŸ‡¸ Washington' },\n  { city: 'beijing', label: 'ðŸ‡¨ðŸ‡³ Beijing' },\n];\n\nconst App = () => {\n  const params = new URLSearchParams(window.location.search);\n  const city = params.get('city_index');\n  const [cityCoord, setCityCoord] = useState({});\n  const [cityInfy, setCityInfo] = useState({});\n  const [cityIndex, setCityIndex] = useState(city || 0);\n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState('');\n\n  if(cityCoord == {}) {\n    setCityCoord(getUserGeolocation(navigator));\n  }\n\n  async function getCityName(latitude, longitude) {\n    try {\n      const response = await axios.get( `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${OPEN_CAGE_DATA_KEY}`);\n      console.log(response.data.results[0]);\n      if(response.data.results[0]) {\n        setCityInfo({city: response.data.results[0].components.village, label: response.data.results[0].annotations.flag});\n      }\n    } catch (err) {\n      if (OPEN_WEATHER_MAP_KEY.length === 0) {\n        // Use mock data if no key\n        // const transformData = await testData.list.map((data) => ({\n        //   dt: data.dt,\n        //   temp: data.main.temp,\n        //   temp_min: data.main.temp_min,\n        //   temp_max: data.main.temp_max,\n        //   humidity: data.main.humidity,\n        //   icon: data.weather[0].icon,\n        //   desc: data.weather[0].description,\n        //   clouds: data.clouds.all,\n        //   wind: data.wind.speed,\n        // }));\n        setError('');\n      } else {\n        setError(err.stack);\n      }\n    }\n  }\n\n  // const fetchWeatherAsync = async (cityId) => {\n  //   try {\n  //     const response = await axios.get(\n  //       'https://api.openweathermap.org/data/2.5/forecast',\n  //       {\n  //         params: {\n  //           q: cityId,\n  //           lang: 'zh_tw',\n  //           appid: OPEN_WEATHER_MAP_KEY,\n  //           units: 'metric',\n  //         },\n  //       },\n  //     );\n  //     const transformData = await response.data.list.map((data) => ({\n  //       dt: data.dt,\n  //       temp: data.main.temp,\n  //       temp_min: data.main.temp_min,\n  //       temp_max: data.main.temp_max,\n  //       humidity: data.main.humidity,\n  //       icon: data.weather[0].icon,\n  //       desc: data.weather[0].description,\n  //       clouds: data.clouds.all,\n  //       wind: data.wind.speed,\n  //     }));\n  //     setForecast(transformData);\n  //   } catch (err) {\n  //     if (OPEN_WEATHER_MAP_KEY.length === 0) {\n  //       // Use mock data if no key\n  //       const transformData = await testData.list.map((data) => ({\n  //         dt: data.dt,\n  //         temp: data.main.temp,\n  //         temp_min: data.main.temp_min,\n  //         temp_max: data.main.temp_max,\n  //         humidity: data.main.humidity,\n  //         icon: data.weather[0].icon,\n  //         desc: data.weather[0].description,\n  //         clouds: data.clouds.all,\n  //         wind: data.wind.speed,\n  //       }));\n  //       setForecast(transformData);\n  //       setError('');\n  //     } else {\n  //       setError(err.stack);\n  //     }\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   fetchWeatherAsync(cities[cityIndex].city);\n  // }, []); // notice the empty array here\n\n  \n  useEffect(() => {\n    getCityName(cityCoord);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {error.length === 0 ? (\n        <WeatherWidget\n          config={{\n            location: cities[cityIndex].label,\n            unit: 'metric',\n            locale: 'zh-tw',\n            onLocationClick: () => {\n              if (cityIndex + 1 >= cities.length) {\n                setCityIndex(0);\n                fetchWeatherAsync(cities[0].city);\n              } else {\n                setCityIndex(cityIndex + 1);\n                fetchWeatherAsync(cities[cityIndex + 1].city);\n              }\n            },\n          }}\n          forecast={forecast}\n        />\n      ) : (\n        <div>\n          <h2>Unable to fetch weather data!</h2>\n          <pre>{error}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}